on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: windows-gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Copy assets with corresponding names
        shell: bash
        run: |
          binary_name="cu"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "target/${{ matrix.target }}/release/$binary_name-windows.exe"
            echo "ASSET=target/${{ matrix.target }}/release/$binary_name-windows.exe" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name" "target/${{ matrix.target }}/release/$binary_name-macos"
            echo "ASSET=target/${{ matrix.target }}/release/$binary_name-macos" >> $GITHUB_ENV
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "target/${{ matrix.target }}/release/$binary_name-linux"
            echo "ASSET=target/${{ matrix.target }}/release/$binary_name-linux" >> $GITHUB_ENV
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
